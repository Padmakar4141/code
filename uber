import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
# from sklearn.metrics import accuracy_score, r2score
from sklearn.ensemble import RandomForestRegressor

uber = pd.read_csv('uber.csv')

uber

uber.isnull().sum()

uber.fillna(method='ffill',inplace=True)

uber.isnull().sum()

uber_clean = uber.drop(['Unnamed: 0','key'],axis=1)

corrs = uber_clean.corr()

corrs

sns.heatmap(corrs)

sns.boxplot(uber_clean['fare_amount'])

uber_clean.dtypes

uber_clean['pickup_datetime'] = pd.to_datetime(uber_clean['pickup_datetime'])

uber_clean.dtypes

uber_clean = uber_clean.assign(hour = uber_clean.pickup_datetime.dt.hour, day = uber_clean.pickup_datetime.dt.hour, month = uber_clean.pickup_datetime.dt.month, dayofweek = uber_clean.pickup_datetime.dt.dayofweek)

uber_clean.dtypes

uber_clean.plot(kind='box', subplots=True, layout=(7,2), figsize=(15,20))

def remove_outlier(data,col):
    Q1 = data[col].quantile(0.25)
    Q3 = data[col].quantile(0.75)
    iqr = Q3-Q1
    lower = Q1-1.5*iqr
    upper = Q3 + 1.5*iqr
    data[col] = np.clip(data[col],lower,upper)
    return data

def treat_outliers(data, cols):
    for col in cols:
        data1 = remove_outlier(data, col)
    return data1

treat_outliers(uber_clean, uber_clean.iloc[:,0::])

uber_clean.plot(kind='box', subplots=True, layout=(7,2), figsize=(15,20))

!pip install haversine

import haversine as hs

def dist(row):
    pickup = (row['pickup_latitude'],row['pickup_longitude'])
    dropoff = (row['dropoff_latitude'],row['dropoff_longitude'])
    return hs.haversine(pickup,dropoff)
   

uber_clean['distance'] = uber_clean.apply(dist,axis=1)

X = uber_clean[['distance','passenger_count','hour','day','month','dayofweek']]
y = uber_clean['fare_amount']          

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.33)

linear = LinearRegression()

linear.fit(X_train, y_train)

y_pred = linear.predict(X_test)

from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test, y_pred)

rmse = np.sqrt(mse)

rmse

r2Score = r2_score(y_test,y_pred)

r2Score

rf = RandomForestRegressor()

rf.fit(X_train, y_train)

y_pred_rf = rf.predict(X_test)

